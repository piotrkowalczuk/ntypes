version: 2.1
commands:
  go_install:
    parameters:
      package:
        type: string
      version:
        type: string
        default: "master"
    steps:
      - run:
          name: Go Install <<parameters.package>>@<<parameters.version>>
          environment:
            GO111MODULE: "on"
          command: |
            mkdir -p /go/.tmp/install/<<parameters.package>>
            cd /go/.tmp/install/<<parameters.package>>
            go mod init install/<<parameters.package>>
            go get -u <<parameters.package>>@<<parameters.version>>
references:
  container_config_golang: &container_config_golang
    docker:
      - image: circleci/golang:1.11
        environment:
          GO111MODULE: "on"
    working_directory: /go/src/github.com/piotrkowalczuk/ntypes
  container_config_python: &container_config_python
    docker:
    - image: circleci/python:3
    working_directory: ~/ntypes
  container_config_java: &container_config_java
    docker:
    - image: circleci/openjdk:8
    working_directory: ~/ntypes
    environment:
      SBT_VERSION: 1.2.4
jobs:
  lint_protobuf:
    <<: *container_config_golang
    steps:
    - checkout
    - run:
        name: Install protoc
        command: bash ./.circleci/scripts/install_protoc.sh
    - run:
        name: Install command line tools
        command: |
          go get -u github.com/ckaznocha/protoc-gen-lint
    - run:
        name: Lint protobuf
        command: bash ./.circleci/scripts/generate.sh lint
  test_golang:
    <<: *container_config_golang
    environment:
      TEST_RESULTS: /tmp/test-results/golang
    steps:
    - checkout
    - go_install:
        package: "github.com/golang/protobuf/protoc-gen-go"
        version: "v1.2.0"
    - go_install:
        package: "golang.org/x/tools/cmd/goimports"
    - go_install:
        package: "github.com/jstemmer/go-junit-report"
    - run:
        name: Install protoc
        command: bash ./.circleci/scripts/install_protoc.sh
    - run:
        name: Generate from protobuf
        command: bash ./.circleci/scripts/generate.sh golang
    - run:
        name: Check for mismatch
        command: git diff --exit-code
    - run:
        name: Run tests
        command: |
          mkdir -p $TEST_RESULTS
          trap "go-junit-report <${TEST_RESULTS}/go-test.out > ${TEST_RESULTS}/go-test-report.xml" EXIT
          go test -v | tee ${TEST_RESULTS}/go-test.out
    - store_test_results:
        path: /tmp/test-results
  generate_scala:
    <<: *container_config_java
    steps:
    - checkout
    - run:
        name: Install scalapbc
        command: bash ./.circleci/scripts/install_scalapbc.sh
    - run:
        name: Generate from protobuf
        command: bash ./.circleci/scripts/generate.sh scala
    - persist_to_workspace:
        root: ./tmp
        paths:
        - scala
  publish_scala:
    <<: *container_config_java
    steps:
    - attach_workspace:
        at: ./tmp
    - run:
        name: Packaging
        command: |
          cd ./tmp/scala
          sbt package
    - run:
        name: Publish
        command: |
          cd ./tmp/scala
          sbt publishLocal
          sbt publish
  generate_python:
    <<: *container_config_python
    steps:
    - checkout
    - run:
        name: Install python packages
        command: |
          python -m venv ./venv
          . venv/bin/activate
          pip install grpcio grpcio-tools twine
    - run:
        name: Install protoc
        command: bash ./.circleci/scripts/install_protoc.sh
    - run:
        name: Generate from protobuf
        command: |
          . venv/bin/activate
          bash ./.circleci/scripts/generate.sh python
    - save_cache:
        key: python-dependency-{{ .Branch }}-{{ .Revision }}
        paths:
        - "venv"
        - "ntypes"
  publish_python:
    <<: *container_config_python
    steps:
    - checkout
    - restore_cache:
        keys:
        - python-dependency-{{ .Branch }}-{{ .Revision }}
    - run:
        name: Init VERSION.txt file
        command: make version
    - run:
        name: Create package
        command: |
          python setup.py sdist
          python setup.py bdist_wheel
    - run:
        name: Upload to pypi
        command: |
          . venv/bin/activate
          twine upload dist/*
workflows:
  version: 2
  test_generate_and_publish:
    jobs:
    - lint_protobuf:
        filters:
          tags:
            only: /.*/
    - test_golang:
        requires:
        - lint_protobuf
        filters:
          tags:
            only: /.*/
    - generate_python:
        requires:
        - test_golang
        filters:
          tags:
            only: /.*/
    - generate_scala:
        requires:
        - test_golang
        filters:
          tags:
            only: /.*/
    - publish_python:
        context: twine
        requires:
        - generate_python
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /^(v)?(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(-(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*)?(\+[0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*)?$/
    - publish_scala:
        context: bintray
        requires:
        - generate_scala
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /^(v)?(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(-(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*)?(\+[0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*)?$/